generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstname                String?     @db.VarChar(100)
  lastname                 String?     @db.VarChar(100)
  email                    String      @unique @db.VarChar(100)
  phonenumber              String?     @db.VarChar(20)
  apartmentnumber          String?     @db.VarChar(20)
  leasestartdate           DateTime?   @db.Date
  leaseenddate             DateTime?   @db.Date
  password                 String      @db.Text
  isverified               Boolean     @default(false)
  verificationtoken        String?     @db.VarChar(255)
  verificationtokenexpiry  DateTime?   @db.Timestamp(0)
  passwordresettoken       String?     @db.Text
  passwordresettokenexpiry DateTime?   @db.Timestamp(0)

  // Relations
  maintenance_requests MaintenanceRequest[]
  notifications        Notification[]
  payments             Payment[]
  ratings              Rating[]
  receipts             Receipt[]

  @@map("tenants")
}

model ApartmentListing {
  id              Int       @id @default(autoincrement())
  title           String    @db.Text
  description     String?   @db.Text
  price           Decimal     @db.Decimal(10,2)
  square_feet     Int?
  created_at      DateTime? @default(now())
  image           String?   @db.Text
  updated_at      DateTime?
  apartmentnumber String    @unique @db.VarChar(10)
  beds            String?   @db.VarChar(50)
  baths           Int?
  leasingstatus   String?   @db.Text

  ratings Rating[]

  @@map("apartment_listings")
}

model Report {
  id                 Int       @id @default(autoincrement())
  report_type        String    @db.VarChar(50)
  tenant_name        String    @db.VarChar(255)
  apartment_id       String    @db.VarChar(50)
  amount_paid        Decimal?    @db.Decimal(10,2)
  payment_date       DateTime? @db.Date
  payment_status     String?   @db.VarChar(50)
  issue_title        String?   @db.VarChar(255)
  issue_description  String?   @db.Text
  maintenance_status String?   @db.VarChar(50)
  email              String?   @db.VarChar(255)
  phone_number       String?   @db.VarChar(20)
  registration_date  DateTime? @db.Date
  created_at         DateTime? @default(now())

  @@map("reports")
}

model Receipt {
  id               Int       @id @default(autoincrement())
  tenant_id        String?   @db.Uuid
  apartment_number String?   @db.VarChar(20)
  payment_date     DateTime? @db.Date
  amount_paid      Int?
  pdf              Bytes?
  created_at       DateTime? @default(now())

  tenant Tenant? @relation(fields: [tenant_id], references: [id])

  @@map("receipts")
}

model Payment {
  paymentid     Int       @id @default(autoincrement())
  tenantid      String?   @db.Uuid
  amountpaid    Decimal     @db.Decimal(10,2)
  paymentdate   DateTime  @db.Date
  paymentmethod String    @db.VarChar(50)
  paymentstatus String?   @default("Pending") @db.VarChar(20)

  tenant Tenant? @relation(fields: [tenantid], references: [id])

  @@map("payment")
}

model Landlord {
  id          Int    @id @default(autoincrement())
  firstname   String @db.VarChar(100)
  lastname    String @db.VarChar(100)
  email       String @unique @db.VarChar(255)
  phonenumber String @db.VarChar(15)
  password    String @db.VarChar(255)

  @@map("landlords")
}

model Notification {
  notification_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id         String?  @db.Uuid
  message           String   @db.Text
  notification_date DateTime @default(now())
  status            String?  @default("unread") @db.VarChar(10)

  tenant Tenant? @relation(fields: [tenant_id], references: [id])

  @@map("notifications")
}

model MaintenanceRequest {
  request_id        Int      @id @default(autoincrement())
  tenant_id         String?  @db.Uuid
  issue_description String   @db.Text
  request_date      DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  status            String   @db.VarChar(50)
  technician_id     Int?
  category          String?  @default("General") @db.VarChar(100)

  tenant     Tenant?     @relation(fields: [tenant_id], references: [id])
  technician Technician? @relation(fields: [technician_id], references: [id])

  @@map("maintenance_requests")
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  @@map("admins")
}

model Technician {
  id           Int    @id @default(autoincrement())
  full_name    String @db.VarChar(100)
  phone_number String? @db.VarChar(20)
  specialty    String? @db.VarChar(50)

  maintenance_requests MaintenanceRequest[]

  @@map("technicians")
}

model Rating {
  id        Int       @id @default(autoincrement())
  listing_id Int?
  tenant_id  String?   @db.Uuid
  rating     Int?
  comment    String?   @db.Text
  created_at DateTime? @default(now())

  listing ApartmentListing? @relation(fields: [listing_id], references: [id])
  tenant  Tenant?           @relation(fields: [tenant_id], references: [id])

  @@map("ratings")
}
